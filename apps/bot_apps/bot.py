from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import logging
from dotenv import load_dotenv
import os
import django
from asgiref.sync import sync_to_async  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

# Load Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'telegram_bot_admin.settings')
django.setup()

from apps.bot_apps.models import Client, Code

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
load_dotenv()
token = os.getenv("TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
async def generate_personal_code():
    last_code = await sync_to_async(Code.objects.order_by('-id').first)()
    new_code = last_code.code + 1 if last_code else 3199
    await sync_to_async(Code.objects.create)(code=new_code)
    return f"2B-{new_code}"

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegisterProcess(StatesGroup):
    first_name = State()
    last_name = State()
    phone_number = State()
    warehouse_address = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
    client = await sync_to_async(Client.objects.filter(id=message.from_user.id).first)()
    if client and client.personal_code:
        await send_main_menu(message)
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data='start_registration'))
        await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 2B-–°argo. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'start_registration')
async def start_registration(callback_query: types.CallbackQuery):
    await RegisterProcess.first_name.set()
    await bot.send_message(callback_query.from_user.id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=RegisterProcess.first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['first_name'] = message.text
    await RegisterProcess.next()
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=RegisterProcess.last_name)
async def process_last_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_name'] = message.text
    await RegisterProcess.next()
    
    contact_button = KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    contact_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(contact_button)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=contact_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=types.ContentType.CONTACT, state=RegisterProcess.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.contact.phone_number
    await RegisterProcess.next()
    await message.reply("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ.", reply_markup=warehouse_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
def warehouse_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ì—É–∞–Ω—á–∂–æ—É", callback_data='warehouse_guangzhou'))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (–ì—É–∞–Ω—á–∂–æ—É)
@dp.callback_query_handler(lambda c: c.data == 'warehouse_guangzhou', state=RegisterProcess.warehouse_address)
async def process_warehouse_choice(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        personal_code = await generate_personal_code()
        data['personal_code'] = personal_code
        data['warehouse_address'] = "–ì—É–∞–Ω—á–∂–æ—É"
    
    await sync_to_async(Client.objects.create)(
        id=callback_query.from_user.id,
        first_name=data['first_name'],
        last_name=data['last_name'],
        phone_number=data['phone_number'],
        personal_code=data['personal_code'],
        warehouse_address=data['warehouse_address']
    )

    warehouse_message = f"""ÂêçÂ≠óÔºö{data['personal_code']}
ÁîµËØùÂè∑Ôºö18320304605
Âú∞ÂùÄÔºöÂπø‰∏úÁúÅ ÂπøÂ∑ûÂ∏Ç ÁôΩ‰∫ëÂå∫ ÁôΩ‰∫ëÊπñË°óÈÅì
ÁªÜÂú∞ÂùÄÔºöÁü≥‰∫ïÁü≥Èó®Ë°óÁ∫¢Êòü‰∏úÊàêÂ§ßË°ó3Âè∑({data['personal_code']})
ÈÇÆÊîøÁºñÁ†ÅÔºö510430"""

    response_message = f"""–ò–º—è: {data['first_name']}
–§–∞–º–∏–ª–∏—è: {data['last_name']}
–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}
–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: {data['warehouse_address']}
–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: {data['personal_code']}

{warehouse_message}

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!
    """

    await bot.send_message(callback_query.from_user.id, response_message)
    await state.finish()
    await bot.answer_callback_query(callback_query.id)
    await send_main_menu(callback_query.message)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'about_us'
@dp.callback_query_handler(lambda c: c.data == 'about_us')
async def about_us(callback_query: types.CallbackQuery):
    about_message = "–ú—ã –∫–æ–º–ø–∞–Ω–∏—è 2B-Cargo, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ö–∏—Ç–∞—è –≤ –û—à." \
                    "2B Cargo " \
                    "üööüì¶–ê–í–¢–û–î–û–°–¢–ê–í–ö–ê 3,49$(—Ç–æ–ª—å–∫–æ –∑–∞ –∏—é–ª—å). 9-14–¥–Ω–µ–π.\n\n" \
                    "üá®üá≥ –ì—É–∞–Ω—á–∂–æ—É  -üá∞üá¨–û–®\n\n" \
                    "‚òé–ù–æ–º–µ—Ä–∞  –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: +996999221299\n" 

    await bot.send_message(callback_query.from_user.id, about_message)
    await send_main_menu(callback_query.message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_main_menu –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –∏ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
async def send_main_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data='applications'),
        InlineKeyboardButton("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='faq'),
        InlineKeyboardButton("–û –Ω–∞—Å", callback_data='about_us'),
        InlineKeyboardButton("–ù–∞—à –ê–¥—Ä–µ—Å", callback_data='delivery_address'),  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –û—à–µ"
    )
    keyboard.add(
        InlineKeyboardButton("–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", callback_data='forbidden_goods'),
        InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", callback_data='working_hours')
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:", reply_markup=keyboard)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
@dp.callback_query_handler(lambda c: c.data == 'applications')
async def applications(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("Pinduoduo", callback_data='pinduoduo_application'),
        InlineKeyboardButton("Taobao", callback_data='taobao_application'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
@dp.callback_query_handler(lambda c: c.data == 'applications')
async def applications(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("Pinduoduo", callback_data='pinduoduo_application'),
        InlineKeyboardButton("Taobao", callback_data='taobao_application')
    )
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Taobao"
@dp.callback_query_handler(lambda c: c.data == 'taobao_application')
async def taobao_application(callback_query: types.CallbackQuery):
    photo_path = "C:/path/to/your/image/–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ WhatsApp 2023-06-06 –≤ 19.05.19.jpg"
    caption = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ Taobao:\n\n1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ Taobao.\n2. –ù–∞–π–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä.\n3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.\n4. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä.\n5. –£–∫–∞–∂–∏—Ç–µ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."
    await bot.send_photo(callback_query.from_user.id, photo=open(photo_path, 'rb'), caption=caption)
    await send_main_menu(callback_query.message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Pinduoduo"
@dp.callback_query_handler(lambda c: c.data == 'pinduoduo_application')
async def pinduoduo_application(callback_query: types.CallbackQuery):
    photo_path = "C:/path/to/your/image/–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ WhatsApp 2023-06-06 –≤ 19.05.19.jpg"
    caption = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ Pinduoduo:\n\n1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ Pinduoduo.\n2. –ù–∞–π–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä.\n3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.\n4. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä.\n5. –£–∫–∞–∂–∏—Ç–µ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."
    await bot.send_photo(callback_query.from_user.id, photo=open(photo_path, 'rb'), caption=caption)
    await send_main_menu(callback_query.message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã'
@dp.callback_query_handler(lambda c: c.data == 'working_hours')
async def working_hours(callback_query: types.CallbackQuery):
    working_hours_message = "–ù–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n\n" \
                            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 10:00 - 21:00\n" \
                            "–°—É–±–±–æ—Ç–∞ - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –í—ã—Ö–æ–¥–Ω–æ–π\n\n" \
                            "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!"
    await bot.send_message(callback_query.from_user.id, working_hours_message)
    await send_main_menu(callback_query.message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'
@dp.callback_query_handler(lambda c: c.data == 'forbidden_goods')
async def forbidden_goods(callback_query: types.CallbackQuery):
    forbidden_goods_message = "üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n" \
                             "1. –õ—é–±—ã–µ –ø–æ—Ä–æ—à–∫–∏\n" \
                             "2. –í–∏–Ω–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ –∏ –ø—Ä–æ–±–∫–∏\n" \
                             "3. –ñ–∏–¥–∫–æ—Å—Ç–∏\n" \
                             "4. –°–ø–∏—Ä—Ç–Ω—ã–µ –±—É—Ç—ã–ª–∫–∏\n" \
                             "5. –•–∏–º–∏—á–µ—Å–∫–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏\n" \
                             "6. –í–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞\n" \
                             "7. –ë–∞—Ç–∞—Ä–µ–π–∫–∏ (–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã)\n" \
                             "8. –û—Ä—É–∂–∏–µ (–Ω–æ–∂–∏)\n" \
                             "9. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞, –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞\n" \
                             "10. –ì–æ—Ä—é—á–∏–µ —Å–º–∞–∑–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n" \
                             "11. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã\n" \
                             "12. –ñ–∏–≤–æ—Ç–Ω—ã–µ, —Ä–∞—Å—Ç–µ–Ω–∏—è (—Ñ—Ä—É–∫—Ç—ã)\n" \
                             "13. –î—Ä–æ–Ω—ã\n\n" \
                             """‚ùó–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ —Å–æ–æ–±—â–∏–≤ –Ω–∞–º —Ç–æ –∫–∏—Ç–∞–π—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤–∑–∏–º–∞–µ—Ç —Ç–æ–≤–∞—Ä –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –¥–µ–Ω–µ–≥.
‚ùó–ï—Å–ª–∏ –≤–∞—à –≥—Ä—É–∑ —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–≥–æ –∏–ª–∏ –±–æ–ª—å—à–µ 10–∫–≥ –∏–ª–∏ –∂–µ –≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π  –±–µ–∑ –Ω–∞—à–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ.
 ‚ùó–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –ø–µ—Ä–µ–≤–æ—Å–∫–∏ 100–≥—Ä–∞–º, —ç—Å–ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä –º–µ–Ω—à–µ 100–≥—Ä–∞–º–º–∞ —Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 100–≥—Ä–∞–º. –ò –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å—á–∏—Ç–∞–µ–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.
 
üìåüíØ–í–ê–ñ–ù–û
üì£–ú–´ –ù–ï –ù–ï–°–Å–ú –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨ –ó–ê –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤‚ùó‚ùó‚ùó 
""" \
                             "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    await bot.send_message(callback_query.from_user.id, forbidden_goods_message)
    await send_main_menu(callback_query.message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ FAQ
@dp.callback_query_handler(lambda c: c.data == 'faq')
async def faq_menu(callback_query: types.CallbackQuery):
    faq_keyboard = InlineKeyboardMarkup()
    faq_keyboard.add(
        InlineKeyboardButton("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?", callback_data='faq_how_to_ship'),
        InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?", callback_data='faq_shipping_cost'),
    )
    faq_keyboard.add(
        InlineKeyboardButton("–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?", callback_data='faq_track_package'),
        InlineKeyboardButton("–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏?", callback_data='faq_change_address'),
    )
    faq_keyboard.add(
        InlineKeyboardButton("–ú–æ—è –ø–æ—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–∏—à–ª–∞, —á—Ç–æ –¥–µ–ª–∞—Ç—å?", callback_data='faq_package_not_arrived')
    )
    faq_keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=faq_keyboard)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'back_to_main_menu')
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await send_main_menu(callback_query.message)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ FAQ
@dp.callback_query_handler(lambda c: c.data.startswith('faq_'))
async def handle_faq(callback_query: types.CallbackQuery):
    faq_answers = {
        'faq_how_to_ship': "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ...",
        'faq_shipping_cost': "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...",
        'faq_track_package': "–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å...",
        'faq_change_address': "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ...",
        'faq_package_not_arrived': "–ï—Å–ª–∏ –≤–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞ –Ω–µ –¥–æ—à–ª–∞, –≤–∞–º —Å–ª–µ–¥—É–µ—Ç..."
    }

    answer_key = callback_query.data
    if answer_key in faq_answers:
        await bot.send_message(callback_query.from_user.id, faq_answers[answer_key])
    else:
        await bot.send_message(callback_query.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'delivery_address')
async def delivery_address(callback_query: types.CallbackQuery):
    delivery_address = "–ù–∞—à –ê–¥—Ä–µ—Å –≤ –û—à–µ:\n211 –ö—É—Ä–º–∞–Ω–∂–∞–Ω-–î–∞—Ç–∫–∞ —É–ª."
    latitude = 40.5274000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ö—É—Ä–º–∞–Ω–∂–∞–Ω-–î–∞—Ç–∫–∞ —É–ª. –≤ –û—à–µ
    longitude = 72.7946000
    await bot.send_location(callback_query.from_user.id, latitude, longitude)
    await bot.send_message(callback_query.from_user.id, delivery_address)
    await send_main_menu(callback_query.message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥—Ä–µ—Å–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
